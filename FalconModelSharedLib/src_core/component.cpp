/****************************************************************************
**
** Author: Mike Nickaloff
**
** Contact: seppfuv@gmail.com  (http://www.datafault.net)
**
**
** GNU General Public License Usage
** This file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
**
****************************************************************************/

#include "component.h"
#include "model.h"
#include "subcomponentlist.h"
#include "instruction.h"
#include "instructionlist.h"
#include "../src_handlers/glhandler.h"
//#include "../mainwindow.h"
//#include "../src_xml/xmlbuilder.h"
//#include <QGLViewer/qglviewer.h>
//#include "../src_gfx/glviewer.h"
//#include <QGLViewer/manipulatedFrame.h>
#include <manipulatedFrame.h>
#include <mouseGrabber.h>
Component::Component(QObject *parent, Model *iModel, GLHandler *iGLHandler) :
  QObject(parent), _model(iModel), _glHandler(iGLHandler)
{
  this->setDrawSubComponentListFirst (false);
  this->initInstructionList ();
  this->initSubComponentList ();
  isExpanded = false;
 // this->componentFrame = new qglviewer::ManipulatedCameraFrame();
}
Model* Component::model () {
  if (!this->_model) {
      qDebug() << "FATAL: A call to the method  [  model() ]  was made to a Component that did not have a model assigned in the constructor or via setModel() ";
      qApp->exit (-1);
    }
  return _model;
}

SubComponentList* Component::subComponentList () {
  if (!_subComponentList) {
    this->_subComponentList = new SubComponentList(this, this);
    }
  return _subComponentList;
}
InstructionList* Component::instructionList () {
  if (!_instructionList) {
      this->initInstructionList ();
    }
  return _instructionList;
}
bool Component::drawSubComponentListFirst() {
  return this->_drawSubComponentListFirst;
}
GLHandler* Component::glHandler () {
  if (!this->_glHandler) {
      this->_glHandler = new GLHandler(this);
    }
  return this->_glHandler;
}

QString Component::xml () {
  QString rv;
  rv.append(QString("<Component id=\"%1\" expanded=\"%2\">").arg(this->componentId ()).arg(isExpanded));
 // XMLBuilder* builder = new XMLBuilder(this, "Component");
  if (this->drawSubComponentListFirst ()) {
      rv.append (this->_subComponentList->xml ());
      rv.append (this->instructionList ()->xml ());
    } else {
      rv.append (this->instructionList ()->xml ());
      rv.append (this->_subComponentList->xml ());
    }
  rv.append ("</Component>");
  return rv;
}




void Component::setModel (Model *iModel) {
  _model = iModel;
}
void Component::initSubComponentList () {
  this->_subComponentList = new SubComponentList(this, this);
}
void Component::initInstructionList () {
  this->_instructionList = new InstructionList(this, this);
}
void Component::setDrawSubComponentListFirst(bool value) {
  this->_drawSubComponentListFirst = value;
}
void Component::draw() {
  GLubyte fly[] = {
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb,
    0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c, 0x8c, 0x4c,
    0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb, 0x42, 0xfb

  };





  glPushMatrix();
  if (this->drawSubComponentListFirst ()) {
      if (this->_subComponentList) {
          glPushMatrix();
          this->_subComponentList->draw ();
          glPopMatrix();
        }
    }

  if (this->_instructionList) {
      glPushMatrix();
      if (!this->isSelected ()) {
          glEnable(GL_POLYGON_STIPPLE);		// Enable POLYGON STIPPLE
          glPolygonStipple(fly);				// Pass the stipple arrray
          //glRectf (125.0, 25.0, 225.0, 125.0);
        } else {

          glDisable(GL_POLYGON_STIPPLE);
            }
      this->_instructionList->draw ();
      if (!this->isSelected ()) {
           glDisable(GL_POLYGON_STIPPLE);
        }
      glPopMatrix();
    }

  if (!this->drawSubComponentListFirst ()) {
      if (this->_subComponentList) {
          glPushMatrix();
          this->_subComponentList->draw ();
          glPopMatrix();
        }
    }
  glPopMatrix();

}
